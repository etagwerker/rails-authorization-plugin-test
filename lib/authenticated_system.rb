# Methods are adapted from code generated by acts_as_authenticated
# See http://technoweenie.stikipad.com/plugins/show/Acts+as+Authenticated
module AuthenticatedSystem

  def self.included(base)
    base.send( :helper_method, :current_user ) if base.respond_to? :helper_method
  end
  
  def current_user
    @current_user ||= session[:user] ? User.find(session[:user]) : nil
  end
  
  def current_user_set( new_user )
    session[:user] = new_user ? new_user.id : nil
    @current_user = new_user
  end
  
  def clear_return_location
    session[:return_location_hash] = nil
  end

  def store_return_location
    session[:return_location_hash] = { :action => action_name, :controller => controller_name }
    logger.info("store_return_location of #{session[:return_location_hash].inspect}")
  end
  
  def redirect_back_or_goto( default_location = home_url )
    redirect_location = session[:return_location_hash]
    session[:return_location_hash] = nil
    if redirect_location
      redirect_to redirect_location
    else
      redirect_to default_location
    end
  end

  # Filter method to enforce a login requirement.
  #
  # To require logins for all actions, use this in your controllers:
  #
  #   before_filter :login_required
  #
  # To require logins for specific actions, use this in your controllers:
  #
  #   before_filter :login_required, :only => [ :edit, :update ]
  #
  # To skip this in a subclassed controller:
  #
  #   skip_before_filter :login_required
  #
  def login_required
    current_user ? true : access_denied
  end
  
  # Redirect as appropriate when an access request fails.
  #
  # The default action is to redirect to the login screen.
  #
  # Override this method in your controllers if you want to have special
  # behavior in case the user is not authorized
  # to access the requested action.  For example, a popup window might
  # simply close itself.
  def access_denied
    respond_to do |accepts|
      accepts.html do
        store_return_location
        redirect_to :controller => 'account', :action => 'login'
      end
      accepts.xml do
        headers["Status"]           = "Unauthorized"
        headers["WWW-Authenticate"] = %(Basic realm="Web Password")
        render :text => "Could't authenticate you", :status => '401 Unauthorized'
      end
    end
    false
  end  
end